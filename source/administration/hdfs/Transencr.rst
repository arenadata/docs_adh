Прозрачное шифрование HDFS
==========================

**HDFS** применяет прозрачное шифрование. После настройки, данные считываемые из и записываемые в специальные папки **HDFS** шифруются и дешифруются *прозрачно* без необходимости вносить изменения в код программы клиента. Данные могут быть зашифрованы и дешифрованы только клиентом. **HDFS** никогда не хранит или имеет доступ к незашифрованным данным или их ключам шифрования. Это удовлетворяет два стандартных требования к шифрованию: шифрование на месте (то есть данные на длительном хранилище, например диск) и передача данных в зашифрованном виде.

В действующем стаке, из стандартных уровней взаимодействия с данными, уровень шифрования HDFS действует между уровнем базы данных и уровнем файловой системы. Таким образом шифрование **HDFS** выдает высокую производительность и **Hadoop** может работать прозрачно с зашифрованными данными.

Архитектура
===========

Прозрачное шифрование использует особую концепцию - зона шифрования. Зона шифрования - это особая папка, содержимое которой будет прозрачно шифроваться в момент записи и прозрачно дешифроваться в момент считывания. Каждая зона шифрования имеет свой ключ зоны шифрования, который создается в момент создания зоны. Каждый файл в зоне шифрования имеет собственный уникальный ключ шифрования данных (**DEK**). DEK никогда не используются непосредственно **HDFS**. Вместо этого, **HDFS** использует только ключ шифрования зашифрованных данных (**EDEK**). Клиенты расшифровывают **EDEK** и затем используют последующий **DEK** для чтения и записи данных. Узлы данных **HDFS** видят лишь поток зашифрованных байтов.

Чтобы гарантировать шифрование всех файлов в файловой системе без потери возможности использования разных зон шифрования в разных частях файловой системы, **HDFS** поддерживает вложенные зоны шифрования. После создания зоны шифрования (например, в корневой папке */*), пользователь может создать новые зоны для ее вложенных папок (например, */home/alice*) с разными ключами. **EDEK** файла будет сгенерирован при помощи ключа зоны шифрования из ближайшей вышестоящей зоны.

Для управления ключами шифрования необходим отдельный сервис кластера: **Hadoop Key Management Server** (**KMS**). В контексте шифрования **HDFS**, **KMS** имеет три базовых назначения:

1. Предоставлять доступ к сохраненным ключам зон шифрования.

2. Создание новых ключей шифрования данных для хранилища на **NameNode**.

3. Расшифровка ключей шифрования данных для использования клиентами **HDFS**.

Доступ к данным в зоне шифрования
---------------------------------

При создании нового файла в зоне шифрования, **NameNode** запрашивает у **KMS** сгенерировать новый **EDEK**, зашифрованный с ключом зоны шифрования. **EDEK** затем сохраняется как часть метаданных файла на **NameNode**.

При считывании файла в зоне шифрования, **NameNode** предоставляет клиенту **EDEK** файла и версию ключа зоны шифрования, использованного для шифрования **EDEK**. Затем клиент запрашивает у **KMS** расшифровку **EDEK**, которая включает проверку доступа клиента к версии ключа зоны шифрования. При успешном прохождении проверки, клиент использует **DEK** для расшифровки содержимого файла.

Все перечисленные шаги выполняются автоматически между **DFSClient**, **NameNode**, и **KMS**.

Доступ к данным и метаданным зашифрованного файла контролируется обычными разрешениями файловой системы **HDFS**. Это значит, что, если **HDFS** под угрозой (например, неавторизированный доступ к аккаунту суперюзера **HDFS**), атакующий пользователь получает доступ только к шифрованному тексту и зашифрованным ключам. Тем не менее, поскольку доступ к зонам шифрования контролируется отдельным набором разрешений в **KMS** и хранилище ключей это не представляет угрозу безопасности.

Интерфейс команд crypto
=======================

Для использования прозрачного шифрования **HDFS**, используется набор команд ``crypto``.

Команды
-------

createZone
^^^^^^^^^^

Опции: [-createZone -keyName <keyName> -path <path>]

Создать новую зону шифрования.

.. csv-table:: 
   :header: "Опция", "Описание"
   :widths: 30, 70

   "``path``", "Расположение зоны шифрования. Должно быть пустой папкой. Корзина создается вложением этой."
   "``keyName``", "Имя ключа для зоны шифрования. Большие буквы не поддерживаются."
   
listZones
^^^^^^^^^

Опции: [-listZones]

Список всех зон шифрования. Требует разрешения суперюзера.

provisionTrash
^^^^^^^^^^^^^^

Опции: [-provisionTrash -path <path>]

Создать корзину для зоны шифрования.

.. csv-table:: 
   :header: "Опция", "Описание"
   :widths: 30, 70

   "``path``", "Расположение зоны шифрования."
   
getFileEncryptionInfo
^^^^^^^^^^^^^^^^^^^^^

Опции: [-getFileEncryptionInfo -path <path>]

Получить данные шифрования из файла. Может использоваться, чтобы проверить зашифрован ли файл и имя/версию ключа, использованные в шифровании.

.. csv-table:: 
   :header: "Опция", "Описание"
   :widths: 30, 70

   "``path``", "Расположение файла."

reencryptZone
^^^^^^^^^^^^^

Опции: [-reencryptZone <action> -path <zone>]

Повторно шифровать зону путем ее итерации и запроса у **KeyProvider** интерфейса **reencryptEncryptedKeys** для пакетной перешифровки **EDEK** всех файлов при помощи последней версии ключа зоны шифрования. Требует разрешения суперюзера.

.. Note:: Повторное шифрование не применяется к снапшотам.

.. csv-table:: 
   :header: "Опция", "Описание"
   :widths: 30, 70

   "``action``", "Действие повторного шифрования. Должно быть либо ``-start`` либо ``-cancel``."
   "``path``", "Расположение зоны шифрования."

Повторное шифрование является NameNode-only операцией в **HDFS**, из-за чего может потенциально сильно нагрузить **NameNode**. Следующие конфигурации могут изменяться для управлением нагрузки на **NameNode**, в зависимости от допустимых нагрузок на кластер.

.. csv-table:: 
   :header: "Конфигурация", "Описание"
   :widths: 30, 70

   "*dfs.namenode.reencrypt.batch.size*", "Число **EDEK** в пакете, отправляемом в **KMS** для повторного шифрования. Каждый пакет обрабатывается при блокировке чтения/записи системы. Между обработками происходит торможение системы."
   "*dfs.namenode.reencrypt.throttle.limit.handler.ratio*", "Соотношение блокировок чтения при повторном шифровании. 1.0 означает отсутствие торможений. 0.5 означает повторное шифрование может уделить максимум 50% общего времени обработки на блокировки чтения. Негативные значения и 0 не принимаются."
   "*dfs.namenode.reencrypt.throttle.limit.updater.ratio*", "Соотношение блокировок записи при повторном шифровании. 1.0 означает отсутствие торможений. 0.5 означает повторное шифрование может уделить максимум 50% общего времени обработки на блокировки записи. Негативные значения и 0 не принимаются."

listReencryptionStatus
^^^^^^^^^^^^^^^^^^^^^^

Опции: [-listReencryptionStatus]

Список информации по повторному шифрованию для всех зон. Требует разрешения суперюзера.

Пример
------

::

  # В качестве обычного пользователя, создать новый ключ шифрования
  hadoop key create mykey

  # В качестве суперюзера, создать новую пустую папку и сделать ее зоной шифрования
  hadoop fs -mkdir /zone
  hdfs crypto -createZone -keyName mykey -path /zone

  # Передать ее обычному пользователю
  hadoop fs -chown myuser:myuser /zone

  # В качестве обычного пользователя, положить в нее файл и считать его
  hadoop fs -put helloWorld /zone
  hadoop fs -cat /zone/helloWorld

  # В качестве обычного пользователя, получить данные шифрования из файла
  hdfs crypto -getFileEncryptionInfo -path /zone/helloWorld
  # Вывод консоли: {cipherSuite: {name: AES/CTR/NoPadding, algorithmBlockSize: 16}, cryptoProtocolVersion: CryptoProtocolVersion{description='Encryption zones', version=1, unknownValue=null}, edek: 2010d301afbd43b58f10737ce4e93b39, iv: ade2293db2bab1a2e337f91361304cb3, keyName: mykey, ezKeyVersionName: mykey@0}
